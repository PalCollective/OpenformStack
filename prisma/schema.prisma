// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  account       Account[]
  sessions      Session[]
  workspaces    Workspace[] @relation("UserToWorkspace")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("UserToWorkspace")
  forms     Form[]
}

model Form {
  id                    String   @id @default(cuid())
  name                  String
  closed                Boolean  @default(false)
  // send email to self when form is submitted
  selfEmailNotification Boolean  @default(true)
  selfEmails            String[]

  // send email to respondent when form is submitted
  respondentEmailNotification Boolean @default(false)
  fromName                    String?
  subject                     String?
  message                     String?

  // redirect to custom url when form is submitted
  customRedirect    Boolean      @default(false)
  customRedirectUrl String?
  // webhook url to send data to when form is submitted
  webhookEnabled    Boolean      @default(false)
  webhookUrl        String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  workspace         Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId       String
  submissions       Submission[]
}

model Submission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  data      Json
  isSpam    Boolean  @default(false)
  form      Form     @relation(fields: [formId], references: [id])
  formId    String
}
